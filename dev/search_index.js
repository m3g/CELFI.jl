var documenterSearchIndex = {"docs":
[{"location":"sistema/#Sistema-simulado","page":"Sistema simulado","title":"Sistema simulado","text":"","category":"section"},{"location":"sistema/","page":"Sistema simulado","title":"Sistema simulado","text":"La simulación es de un fluido de 100 partículas (mono-atómicas) que interactúan por un potencial de Lennard-Jones, en un sistema bi-dimensional, periódico.","category":"page"},{"location":"sistema/","page":"Sistema simulado","title":"Sistema simulado","text":"\nV = 4epsilon left( fracsigma^12r^12 - fracsigma^6r^6 right)\n\n\nteste(t)\n\nAbra el archivo potentialjl(httpsgithubcomm3gCELFIjlblobmastersrcpotentialjl) y entienda la implementación del\ncálculo de la energía potencial Note que el cálculo depende de 3\nparámetros epsilon","category":"page"},{"location":"sistema/","page":"Sistema simulado","title":"Sistema simulado","text":", sigma, y el tamaño del sistema periódico. Los parámetros están definidos en la estructura de datos opt, de entrada (veremos más tarde como usarla). ","category":"page"},{"location":"sistema/","page":"Sistema simulado","title":"Sistema simulado","text":"El archivo forces.jl contiene el cálculo de las fuerzas (el gradiente del potencial), y el archivo kinetic.jl contiene el cálculo de la energía cinética. Como el sistema usa condiciones periódicas de contorno, las coordenadas tienen que siempre ser calculadas en relación a la imagen mínima. El cálculo de la imagen mínima está implementado en el archivo image.jl. Es interesante entender la implementación de cada una de estas funciones, que son comunes a todos los métodos que vamos a describir. ","category":"page"},{"location":"sistema/#Temperatura","page":"Sistema simulado","title":"Temperatura","text":"","category":"section"},{"location":"sistema/","page":"Sistema simulado","title":"Sistema simulado","text":"La temperatura del sistema es un parámetro también definido internamente en el programa (puede ser modificado a gusto, pero no lo haremos). La temperatura se define a partir energía cinética media asociada a cada grado de libertad de movimiento del sistema. En el caso que todos los movimientos pueden ser escritos como translaciones, la definición es","category":"page"},{"location":"sistema/","page":"Sistema simulado","title":"Sistema simulado","text":"frac12kT = left frac12 m v_x^2right","category":"page"},{"location":"sistema/","page":"Sistema simulado","title":"Sistema simulado","text":"donde la media, hecha sobre v_x aqui, es equivalente si hecha sobre cualquier otro grado de libertad de translación. En un sistema tridimensional, por lo tanto, ","category":"page"},{"location":"sistema/","page":"Sistema simulado","title":"Sistema simulado","text":"\nleftfrac12m vecv^2 right = \nleftfrac12m left(v_x^2 + v_y^2 + v_z^2right) right = \n3left frac12 m v_x^2 right = frac32kT\n\n\nque es el resultado usual\n\nNuestras simulaciones son de un sistema bi-dimensional En este caso\n\n\nleft frac12m vecv^2 right = \nleft frac12m left(v_x^2 + v_y^2right)right =\n2left frac12m v_x^2 right = kT \n\n\nEn los códigos de dinámica molecular la definición de temperatura se\nda así por la definición de la energía cinética media o en este caso\npor kT","category":"page"},{"location":"sistema/","page":"Sistema simulado","title":"Sistema simulado","text":". En el código de Monte-Carlo la definición de temperatura se da por la tasa de aceptación, con la misma definición. ","category":"page"},{"location":"sistema/","page":"Sistema simulado","title":"Sistema simulado","text":"En todos los códigos fue escogido que se objetiva simular el sistema a la temperatura que corresponde a kT = 06 unidades. Los sistemas simulados tiene 100 partículas, por lo tanto la energía cinética media es 100kT=60 unidades.","category":"page"},{"location":"#Fundamentos-de-Mecánica-Estadística-y-Simulaciones","page":"Home","title":"Fundamentos de Mecánica Estadística y Simulaciones","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Este tutorial contiene las explicaciones para rodar y analizar simulaciones de Dinámica Molecular y Mote-Carlo de un sistema bi-dimensional simple. El objetivo es que el estudiante entre en contacto con diversos detalles técnicos involucrados en la realización de simulaciones y sus limitaciones. ","category":"page"},{"location":"#Instalación-de-CELFI.jl","page":"Home","title":"Instalación de CELFI.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Instale el interpretador de Julia, de https://julialang.org/.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Ejecute el interpretador, e instale el paquete deste curso, usando: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ] add https://github.com/m3g/CELFI.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"(el ] te llevará al prompt the gerenciamento de paquetes, \"(@v1.6) pkg>\", donde debe ser ejecutado el add ...)","category":"page"},{"location":"#Instalación-de-VMD","page":"Home","title":"Instalación de VMD","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Usaremos VMD para visualización de las trajectories. Certifique-se de tenerlo instalado también.","category":"page"},{"location":"#Códigos","page":"Home","title":"Códigos","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia es un lenguage de programación de alta peformance, dinámico, y con sintaxis bastante simple. Todos los códigos de este curso están disponíbles en repositório  https://github.com/m3g/CELFI.jl, y su lectura será estimulada en la medida que avanzemos en la ejecución del tutorial. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Los códigos aqui son razonablemente eficientes para al realización del tutorial, pero no están optimizados para máxima peformance, para que su lectura sea más fácil. ","category":"page"}]
}
